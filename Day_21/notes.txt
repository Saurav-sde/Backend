Why we need refresh token?
May be we don't have to login each time, but for this we achieve it with access token by not giving expiry date of token.
Now suppose we have gicen expiry date of JWT token is unlimited, now suppose somehow hacket got this token then he can use the account for lifetime, now lets think somehow user get to know that his account has getting used by someone, so he change the password of the account but after this also tokens not get expired because it is digitally signed by header and payloads not the password so token never gets invalid.
Even after changing password token doesn't expired, and hacker will use the account even after password is changed.

Now lets think that when we change the password server gave new token, but the old token never expires, so from now on both token works, beacause server only validate that is this token is generated by me or not , and this is done by hashing the (header+payload) and then encrypt it using server key.
so there is not any way that we can invalidate the previous token

So, whenever we use access token or JWT token please add a expiry time otherwise it never be invalidated

The problem is that we didn't have any way to invalidate it after the password is changed, if i didn't mention the expiry date
here, refresh Token came 
From now on whenever we generate JWT token we always mention expiry date.
Now suppose we mention the expiry date of 30 min, and somehow hacker got the token now he can only access the account till 30 min after that the token gets expired.But now user has to login every 30min this leads to bad user experience. this gets solved by refresh token

Refresh Token :- when user login server gives two token access and refresh token, in access token it has given expiry of 30min, and in refresh token we have given expiry date of 7 days
Now in future user sends any request it gets the response fomr the server, when 30 min gets completed user doesn't send access token it sends refresh token , when refresh token came to server, server knows that access token is expired so it generates a new access token with expiry of 30 min, Now user can req with this newly generated access token. By this it solved the problem of not getting logged in every time
Now if validity of refresh token is getting expire then server generate new refresh token with validity of 7 days.

Now suppose hacker got the refresh token, then he can access the account. Now we again came to the same problem, But here if user change the password the refresh token gets invalidated but access token never gets invalidated. This is because we store the refresh token in our Database but the access token is stateless.

Now the Queston how does refresh token looks like, is it look like access token(JWT)?
No it doesn't looks like access token, it simply generates a random string, and store it in the database with some additional information(like username, expiry date). 

Now when user sends req with refresh token, refresh token gets to the server , server matches this token from the database and sees the expiry date there if it is valid then server generates a new access token for the user

How Server invalidate the refresh token when user change the password?
when user change the password, server simply go to the database and delete rhe refresh token that is stored there and generate a new refersh token store it in db and send it to the user, now in future if someone try to get the access using previous refresh key then server search this in databse and it is not present there, then server throw an error.

So, we have to store refresh token in the database.
Can we Store Refresh Token in plain text in db?
The answer is no, as when db leaks hacker gets the refresh key , so we store refersh token in form hash, only hash the strong part not the additional info as hashing is one way,if we hash additional info it never gets reversed back to orginal info, then we can't check the expiry date an all, so it is stored in plain text.

Now suppose someone access the account using access token and changed the password of the account, then how can user access their own account?
For this reason only some website or apps asks to enter the old password , if we forget the old pass then user asks to send the code on email id. Requiring the old password when changing to a new one is a security measure designed to prevent exactly this kind of token hijacking or unauthorized account changes.

